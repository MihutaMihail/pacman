//
// General
//

**/// window.innerWidth / windows.addEventListener \\\**

    You'll see that in the code, there are no "window." because the browser is smart enough to understand what we're trying 
    to do so there is no need to write "window.". This means that we can tidy our code a little more


**/// importing / exporting values \\\**

    It seems that getting the canvas elements js file will take priority which means that any code in that file that you don't 
    want to be executed, will be executed because this file will have priority over any other files. In addition, when exporting 
    a value, it will export a reference to the actual value. This means that if the value is modified after exporting it, it 
    will still have the modified value

--------------------------------------------------------------------------------------------------------------------------------------------

//
// Keyboard Input
//

**/// addEventListener('keydown', ({key})) => ... \\\**

    The reason why we're using {key} is because when we press down a key, we can collect all data that comes within the object "event"
    By using "{key}" we can extract the only element that we need, in this case it's "key" inside the object "event"


**/// player.velocity.x = 0;  \\\**
**/// player.velocity.y = -5; \\\**

    When you have velocity x & y to a certain value (not 0), it will move diagonally. However, if you were to set the 
    other value (x or y) to 0 beforehand, it means that it will only move up, down, left or right. It will not move diagonally anymore

--------------------------------------------------------------------------------------------------------------------------------------------

//
// Boundary Draw
//

**/// map.forEach(row, i)... \\\**

    This method will go through every element in an array, we can call it whatever we want (ie row)
    If you want to get the index of the element in the array, all you need to do is to put a comma and write a variable name
    It will automatically put the index value into the second variable

 **///  map.forEach((row, i) => {                                               \\\**    
            row.forEach((symbol, j) => {
                powerUps.push(
                        new PowerUp({
                            position: {
                                x: j * Boundary.width + Boundary.width / 2,
                                y: i * Boundary.height + Boundary.height / 2
                            },
                        })
                    )
            })
        })

    The 2 loops are used to go through every single element in the 'map' array. We have a loop for the row and a loop for the values inside
    that said row. In this case, we create a power up in which we push this power up into our array of power ups. Its position is set by
    using 'i' and 'j' (both index) to get the column and row of the power up.

**/// c.canvas.getBoundingClientRect() \\\**

    This functions will return a DOMRect object which has the following properties : 'top', 'left', 'right', 'bottom', 'width' and 'height'.
    In this case, we use the properties 'left' and 'top' because we want to get the position of the canvas on the screen to then calculate
    the position of the game boundaries.

--------------------------------------------------------------------------------------------------------------------------------------------

//
// Player Class
//

**/// draw() --> beginPath() / closePath() \\\**

    The "beginPath()" method allows us to start a path so that we can draw our own object (lines, arc, curves) which we need for our player,
    ghosts, power up (because they're circular). Afterwards, we close the path with "closePath()"

**/// c.save() && c.restore() \\\**

    Using the rotate method that we've used, we need to first wrap our object that we want to rotate if now it will rotate the whole canvas
    c.rotate() && c.translate() are global functions meaning that they will affect the whole canvas

**///  c.translate(this.position.x, this.position.y);    \\\**
       c.rotate(this.rotation);
       c.translate(-this.position.x, -this.position.y); 

    This is used to rotate our player. We first used our player position (x,y) to translate (move) the canvas origin point (0,0) to a new
    location. Next, we rotate the canvas by the number a certain number of degrees. Finally, we set the canvas origina point back to its
    original position

**/// this.radians \\\**

    A full circle is Math.PI * 2, so substraction / adding 0.75 will take away / add a portion the circle

**/// if (this.radians < 0 || this.radians > 0.75 ) this.openRate = -this.openRate \\\**
        
      this.radians += this.openRate; 

    (They are 2 different lines of code)
    This is used to create the pacman chomp animation. By adding our 'openRate' variable to our 'radians'. It will immediately set the value
    of 'openRate' to negative and start removing part of the circle. Once this reached 0, it will set the value back to positive which will
    fill the circle again.

--------------------------------------------------------------------------------------------------------------------------------------------

//
// Animate
//

**/// circle: {...player, velocity: {x:0, y-3}} \\\**

    This code copies the object "player" into the object "circle". However, we can modify the object properties and set their values since
    this is just a copy of the object

**/// if (Math.hypot(pellet.position.x - player.position.x, pellet.position.y - player.position.y) < pellet.radius . player.radius) \\\**

    This code is useful for calculating distances between two points in 2d or 3d. In this example, we want to calculate 
    the distance between our player and the pellet. However this code will only calculate the distance between the center 
    of these two points. The 2nd part "< pellet.radius..." will calculate the distance between these two points using their 
    radius to know if they're touching.

**/// for (let i = pellets.length - 1; 0 < i; i--) \\\**

    Everytime we splice the array of pellets to remove the pellet that ther user has touched, the pellets inside the array 
    will shift position and will flash for a split second. To remove that, we'll need to run through the array of pellets backwards.

**/// if (JSON.stringify(collisions) !== JSON.stringify(ghost.prevCollisions)) \\\**

    To properly test if two arrays are the same, we can use "JSON.stringify()" to tranform the arrays intro strings so that they can be compared

**/// if (collisions.length > ghost.prevCollisions.length)  \\\** 
            ghost.prevCollisions = collisions;

    The point of the 'prevCollisions' array is to know with which boundaries our ghost is colliding with. This means that if 
    the 'collisions' array is shorter than the 'prevCollisions' array, we're not colliding with a boundary anymore. Instead of setting the 
    array to our 'prevCollisions', we can compare them later to find which path has been opened

    // 1st frame
    collisions = [up, down] // colliding with 'up' boundary & 'down' boundary
    prevCollisions = []     // this array will take the 'collisions' array values because the latter is longer

    // 2nd frame ... 24th frame ---> nothing happened because our 'collisions' array has not increased

    // 25th frame
    collisions = [up]               // colliding with 'up' boundary 
    prevCollisions = [up, down]     // by comparing the two arrays, we can now tell that we are not longer colliding with the down boundary
                                        (this is done later in the code)
--------------------------------------------------------------------------------------------------------------------------------------------

//
// Collision Methods
//

**/// circle.position.y - circle.radius + circle.velocity.y <= rectangle.position.y + rectangle.height + padding \\\**

    'circle.position.y - circle.radius' gives the top of the circle. Adding the velocity (that we set as a parameter earlier), we can check
    if it will colide with a boundary.

    'rectangle.position.y + rectangle.height' gives the bottom of a rectangle. This way we check if the player's top collides with the bottom
    of the rectangle. If we were to change the speed of the ghost / player, this function will no longer work properly. That's why we
    add a 'padding' to the equation. This padding will take the top / bottom / left / right of a circle and minus 1 (ie because we decreased
    the speed of the ghost by 1)